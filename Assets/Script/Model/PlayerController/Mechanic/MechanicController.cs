//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Script/Model/PlayerController/Mechanic/MechanicController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Com.Unnamed.RacingGame.Mechanic
{
    public partial class @MechanicController: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MechanicController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MechanicController"",
    ""maps"": [
        {
            ""name"": ""Mechanic"",
            ""id"": ""e622cb82-85b9-4a52-a7a6-8102d3885f84"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""23b22b61-d5de-4e49-8fef-dc7610b2d2b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""267cbb02-1fa9-49a9-a195-5a86e893415f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse/Keyboard"",
            ""bindingGroup"": ""Mouse/Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Mechanic
            m_Mechanic = asset.FindActionMap("Mechanic", throwIfNotFound: true);
            m_Mechanic_Newaction = m_Mechanic.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mechanic
        private readonly InputActionMap m_Mechanic;
        private List<IMechanicActions> m_MechanicActionsCallbackInterfaces = new List<IMechanicActions>();
        private readonly InputAction m_Mechanic_Newaction;
        public struct MechanicActions
        {
            private @MechanicController m_Wrapper;
            public MechanicActions(@MechanicController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Mechanic_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Mechanic; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MechanicActions set) { return set.Get(); }
            public void AddCallbacks(IMechanicActions instance)
            {
                if (instance == null || m_Wrapper.m_MechanicActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MechanicActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IMechanicActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IMechanicActions instance)
            {
                if (m_Wrapper.m_MechanicActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMechanicActions instance)
            {
                foreach (var item in m_Wrapper.m_MechanicActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MechanicActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MechanicActions @Mechanic => new MechanicActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse/Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        private int m_ControllerSchemeIndex = -1;
        public InputControlScheme ControllerScheme
        {
            get
            {
                if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
                return asset.controlSchemes[m_ControllerSchemeIndex];
            }
        }
        public interface IMechanicActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
